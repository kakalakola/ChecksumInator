#ifndef GBA_PROCESSOR
  #define GBA_PROCESSOR

  class GBA{
    public:
      struct Checksum{
        unsigned int header=0
                     ,actual=0
                     ;
      }checksum;

      char romHeader[13]
           ,gameCode[5]
           ;
      unsigned int version=0
                   ;
      bool dataChanged=false;
      std::vector<unsigned char> data;

      GBA(char* fileName){
        openFile(fileName,&data);

        std::cout<<"Processing GBA ROM: "<<fileName<<"\n";

        for(int i=0;i<0x9c;i++){
          if(data[4+i]!=nintendoLogo[i]){
            throw std::runtime_error("Nintendo logo not found at ROM location 0x04-0xa0. Most likely not a GBA ROM.");
          }
        }


        for(int i=0;i<12;i++){
          romHeader[i]=data[0xa0+i];
        }
        romHeader[12]=0;

        for(int i=0;i<4;i++){
          gameCode[i]=data[0xac+i];
        }

        gameCode[4]=0;

        version=data[0xbc];

        checksum.header=data[0xbd];

        std::cout<<"\nChecking for & correcting errors:\n";

        processChecksum();

        if(!dataChanged){
          std::cout<<" - No errors found\n";
        }

        showInfo();

        if(dataChanged){
          saveFile(fileName,&data);
        }
      }

    private:
      std::vector<unsigned char> nintendoLogo={
        0x24,0xff,0xae,0x51,0x69,0x9a,0xa2,0x21,0x3d,0x84,0x82,0x0a
        ,0x84,0xe4,0x09,0xad,0x11,0x24,0x8b,0x98,0xc0,0x81,0x7f,0x21,0xa3,0x52,0xbe,0x19
        ,0x93,0x09,0xce,0x20,0x10,0x46,0x4a,0x4a,0xf8,0x27,0x31,0xec,0x58,0xc7,0xe8,0x33
        ,0x82,0xe3,0xce,0xbf,0x85,0xf4,0xdf,0x94,0xce,0x4b,0x09,0xc1,0x94,0x56,0x8a,0xc0
        ,0x13,0x72,0xa7,0xfc,0x9f,0x84,0x4d,0x73,0xa3,0xca,0x9a,0x61,0x58,0x97,0xa3,0x27
        ,0xfc,0x03,0x98,0x76,0x23,0x1d,0xc7,0x61,0x03,0x04,0xae,0x56,0xbf,0x38,0x84,0x00
        ,0x40,0xa7,0x0e,0xfd,0xff,0x52,0xfe,0x03,0x6f,0x95,0x30,0xf1,0x97,0xfb,0xc0,0x85
        ,0x60,0xd6,0x80,0x25,0xa9,0x63,0xbe,0x03,0x01,0x4e,0x38,0xe2,0xf9,0xa2,0x34,0xff
        ,0xbb,0x3e,0x03,0x44,0x78,0x00,0x90,0xcb,0x88,0x11,0x3a,0x94,0x65,0xc0,0x7c,0x63
        ,0x87,0xf0,0x3c,0xaf,0xd6,0x25,0xe4,0x8b,0x38,0x0a,0xac,0x72,0x21,0xd4,0xf8,0x07
      };

      void processChecksum(){
        calculateChecksum();
        if(checksum.header!=checksum.actual){
          std::cout<<std::hex<<" - Checksum in header ("<<checksum.header<<") does not match calculated checksum ("<<checksum.actual<<std::dec<<"). Correcting.\n\n";
          data[0xbd]=(checksum.actual);
          checksum.header=data[0xbd];
          dataChanged=true;
        }
      }

      void calculateChecksum(){
        for(int i=0xa0;i<=0xbc;i++){
          checksum.actual+=data[i];
        }
        checksum.actual=(-(checksum.actual+0x19)%256);
      }

      void showInfo(){
        std::cout<<"\n";
        std::cout<<"ROM title: "<<romHeader<<"\n";
        std::cout<<"Checksum: "<<std::hex<<checksum.header<<"\n"<<std::dec;

        std::cout<<"Game code: "<<gameCode<<"\n";

        std::cout<<"ROM version: "<<version<<"\n";
        std::cout<<"Cart size : "<<(data.size())<<" bytes ("<<((data.size())>>10)<<" Kb)\n";
      }
  };

#endif